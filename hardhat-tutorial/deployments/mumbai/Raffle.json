{
  "address": "0xa9C0fA9854f49C65396233bCf823317275A04F2F",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vrfCoordinatorV2",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "entranceFee",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "gasLane",
          "type": "bytes32"
        },
        {
          "internalType": "uint64",
          "name": "subscriptionId",
          "type": "uint64"
        },
        {
          "internalType": "uint32",
          "name": "callbackGasLimit",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "interval",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "have",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "want",
          "type": "address"
        }
      ],
      "name": "OnlyCoordinatorCanFulfill",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle__NotEnoughEthEntered",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle__NotOpen",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle__TransferFailed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "currentBalance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "numPlayers",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "raffleState",
          "type": "uint256"
        }
      ],
      "name": "Raffle__upKeepNotNeeded",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        }
      ],
      "name": "RaffleEnter",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "name": "RequestedRaffleWinner",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "winner",
          "type": "address"
        }
      ],
      "name": "WinnerPicked",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "checkUpkeep",
      "outputs": [
        {
          "internalType": "bool",
          "name": "upkeepNeeded",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enterRaffle",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEntranceFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getInterval",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLatestTimeStamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumWords",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumberOfPlayers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getPlayers",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRaffleState",
      "outputs": [
        {
          "internalType": "enum Raffle.RaffleState",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRecentWinner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRequestConfirmations",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "i_entranceFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "performUpkeep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "rawFulfillRandomWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xe16b43c5fc45e8ba8cea409409c99a655c76b99b0affdf65d4dc4c2940554299",
  "receipt": {
    "to": null,
    "from": "0xFddb943e7E891B5bFD8FE72d3a1BdfC09A615eF6",
    "contractAddress": "0xa9C0fA9854f49C65396233bCf823317275A04F2F",
    "transactionIndex": 0,
    "gasUsed": "1226153",
    "logsBloom": "0x
    "blockHash": "0xc98e62ec8ec02d65bc095a639bc07aa821ae803536cb4f7c9ccf516008510c43",
    "transactionHash": "0xe16b43c5fc45e8ba8cea409409c99a655c76b99b0affdf65d4dc4c2940554299",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 33224996,
        "transactionHash": "0xe16b43c5fc45e8ba8cea409409c99a655c76b99b0affdf65d4dc4c2940554299",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000fddb943e7e891b5bfd8fe72d3a1bdfc09a615ef6",
          "0x0000000000000000000000003a22c8bc68e98b0faf40f349dd2b2890fae01484"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000009cd277c18b7c8000000000000000000000000000000000000000000000000201eebf09be9fa360000000000000000000000000000000000000000000003fe7e3226dd4ad72a7b00000000000000000000000000000000000000000000000020151ec91fd1426e0000000000000000000000000000000000000000000003fe7e3bf404c6efe243",
        "logIndex": 0,
        "blockHash": "0xc98e62ec8ec02d65bc095a639bc07aa821ae803536cb4f7c9ccf516008510c43"
      }
    ],
    "blockNumber": 33224996,
    "cumulativeGasUsed": "1226153",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x7a1BaC17Ccc5b313516C5E16fb24f7659aA5ebed",
    "10000000000000000",
    "0x4b09e658ed251bcafeebbc69400383d49f344ace09b9576fe248bb02c003fe9f",
    "3683",
    "500000",
    "30"
  ],
  "numDeployments": 5,
  "solcInputHash": "154a50ca4b74b165dc43db63cfb2ead4",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vrfCoordinatorV2\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"entranceFee\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"gasLane\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"interval\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle__NotEnoughEthEntered\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle__NotOpen\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle__TransferFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"currentBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numPlayers\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"raffleState\",\"type\":\"uint256\"}],\"name\":\"Raffle__upKeepNotNeeded\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"RaffleEnter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"RequestedRaffleWinner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"}],\"name\":\"WinnerPicked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enterRaffle\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEntranceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestTimeStamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumWords\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberOfPlayers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getPlayers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRaffleState\",\"outputs\":[{\"internalType\":\"enum Raffle.RaffleState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRecentWinner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRequestConfirmations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"i_entranceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Shaiza Tahir\",\"details\":\"This implements ChainlinkVRF v2 and Chainlink Keepers\",\"kind\":\"dev\",\"methods\":{\"checkUpkeep(bytes)\":{\"details\":\"This is the function that chainlink keeper nodes call they look for the 'upKeepNeeded' to return true The following should be true in order to return true: 1 Our time interval should have passed. 2 The lottery should have atleast 1 player, and some ETH 3 Our subscription is funded with link 4 The lottery should be in an \\\"open state\\\"\"}},\"title\":\"A sample Raffle contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"This contract is for creating an untamperable decentralized smart contract\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Raffle.sol\":\"Raffle\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x3d709a5e0f1f9b8841172b10ba8af785dd51a13eda9fc395723a706e51329904\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface KeeperCompatibleInterface {\\n  /**\\n   * @notice method that is simulated by the keepers to see if any work actually\\n   * needs to be performed. This method does does not actually need to be\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\n   * @dev To ensure that it is never called, you may want to add the\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\n   * method.\\n   * @param checkData specified in the upkeep registration so it is always the\\n   * same for a registered upkeep. This can easily be broken down into specific\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n   * same contract and easily differentiated by the contract.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\n   * upkeep is needed. If you would like to encode data to decode later, try\\n   * `abi.encode`.\\n   */\\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n  /**\\n   * @notice method that is actually executed by the keepers, via the registry.\\n   * The data returned by the checkUpkeep simulation will be passed into\\n   * this method to actually be executed.\\n   * @dev The input to this method should not be trusted, and the caller of the\\n   * method should not even be restricted to any single registry. Anyone should\\n   * be able call it, and the input should be validated, there is no guarantee\\n   * that the data passed in is the performData returned from checkUpkeep. This\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\n   * change while the performUpkeep transaction is waiting for confirmation.\\n   * Always validate the data passed in.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\n   * calling `abi.decode`. This data should not be trusted, and should be\\n   * validated against the contract's current state.\\n   */\\n  function performUpkeep(bytes calldata performData) external;\\n}\\n\",\"keccak256\":\"0xb6577cda6b731b655aebcb6e3c24f8658d3f4c5eda07200622d07d4570af33ea\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig()\\n    external\\n    view\\n    returns (\\n      uint16,\\n      uint32,\\n      bytes32[] memory\\n    );\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(uint64 subId)\\n    external\\n    view\\n    returns (\\n      uint96 balance,\\n      uint64 reqCount,\\n      address owner,\\n      address[] memory consumers\\n    );\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n}\\n\",\"keccak256\":\"0xcb29ee50ee2b05441e4deebf8b4756a0feec4f5497e36b6a1ca320f7ce561802\",\"license\":\"MIT\"},\"contracts/Raffle.sol\":{\"content\":\"// Raffle\\r\\n\\r\\n// Enter the lottery (paying some amount)\\r\\n// Pick a random winner (verifiably random)\\r\\n// Winner to be selected every X minutes -> completely automated\\r\\n// Chainlink Oracles -> Randomness, Automated execution (chainlink keepers)\\r\\n\\r\\n// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.7;\\r\\n\\r\\nimport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\\\";\\r\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\";\\r\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\\\";\\r\\n\\r\\nerror Raffle__NotEnoughEthEntered();\\r\\nerror Raffle__TransferFailed();\\r\\nerror Raffle__NotOpen();\\r\\nerror Raffle__upKeepNotNeeded(\\r\\n    uint256 currentBalance,\\r\\n    uint256 numPlayers,\\r\\n    uint256 raffleState\\r\\n);\\r\\n\\r\\n/**\\r\\n * @title A sample Raffle contract\\r\\n * @author Shaiza Tahir\\r\\n * @notice This contract is for creating an untamperable decentralized smart contract\\r\\n * @dev This implements ChainlinkVRF v2 and Chainlink Keepers\\r\\n */\\r\\n\\r\\ncontract Raffle is VRFConsumerBaseV2, KeeperCompatibleInterface {\\r\\n    // Type Declarations\\r\\n    enum RaffleState {\\r\\n        OPEN,\\r\\n        CALCULATING\\r\\n    } // uint256 0 = OPEN, 1 = CALCULATING\\r\\n    /* State Variables */\\r\\n    uint256 public immutable i_entranceFee;\\r\\n    address payable[] private s_players;\\r\\n    VRFCoordinatorV2Interface private immutable i_vrfCoordinator;\\r\\n    bytes32 private immutable i_gasLane;\\r\\n    uint64 private immutable i_subscriptionId;\\r\\n    uint16 private constant REQUEST_CONFIRMATON = 3;\\r\\n    uint32 private immutable i_callbackGasLimit;\\r\\n    uint32 private constant NUM_WORDS = 1;\\r\\n\\r\\n    // Lottery Variables\\r\\n    address private s_recentWinner;\\r\\n    RaffleState private s_raffleState;\\r\\n    uint256 private s_lastTimeStamp;\\r\\n    uint256 immutable i_interval;\\r\\n    /* Events */\\r\\n    // Name the event with the function name reversed\\r\\n    event RaffleEnter(address indexed player);\\r\\n    event RequestedRaffleWinner(uint256 indexed requestId);\\r\\n    event WinnerPicked(address indexed winner);\\r\\n\\r\\n    // Functions\\r\\n    constructor(\\r\\n        address vrfCoordinatorV2, // contract, So knowing that this an address should be a tip that we're probably going\\r\\n        // to need to deploy mocks. since we're going to need to interact with VRF Coordinator contract that's outside of our project\\r\\n        uint256 entranceFee,\\r\\n        bytes32 gasLane,\\r\\n        uint64 subscriptionId,\\r\\n        uint32 callbackGasLimit,\\r\\n        uint256 interval\\r\\n    ) VRFConsumerBaseV2(vrfCoordinatorV2) {\\r\\n        i_entranceFee = entranceFee;\\r\\n        i_vrfCoordinator = VRFCoordinatorV2Interface(vrfCoordinatorV2);\\r\\n        i_gasLane = gasLane;\\r\\n        i_subscriptionId = subscriptionId;\\r\\n        i_callbackGasLimit = callbackGasLimit;\\r\\n        s_raffleState = RaffleState.OPEN;\\r\\n        s_lastTimeStamp = block.timestamp;\\r\\n        i_interval = interval;\\r\\n    }\\r\\n\\r\\n    function enterRaffle() public payable {\\r\\n        if (msg.value < i_entranceFee) {\\r\\n            revert Raffle__NotEnoughEthEntered();\\r\\n        }\\r\\n        if (s_raffleState != RaffleState.OPEN) {\\r\\n            revert Raffle__NotOpen();\\r\\n        }\\r\\n        s_players.push(payable(msg.sender));\\r\\n        emit RaffleEnter(msg.sender);\\r\\n    }\\r\\n\\r\\n    /** \\r\\n    @dev This is the function that chainlink keeper nodes call\\r\\n    they look for the 'upKeepNeeded' to return true\\r\\n    The following should be true in order to return true:\\r\\n    1 Our time interval should have passed.\\r\\n    2 The lottery should have atleast 1 player, and some ETH\\r\\n    3 Our subscription is funded with link\\r\\n    4 The lottery should be in an \\\"open state\\\"\\r\\n    */\\r\\n    function checkUpkeep(\\r\\n        bytes memory /* checkData */\\r\\n    )\\r\\n        public\\r\\n        view\\r\\n        override\\r\\n        returns (bool upkeepNeeded, bytes memory /* performData */)\\r\\n    {\\r\\n        bool isOpen = RaffleState.OPEN == s_raffleState;\\r\\n        bool timePassed = ((block.timestamp - s_lastTimeStamp) > i_interval);\\r\\n        bool hasPlayers = s_players.length > 0;\\r\\n        bool hasBalance = address(this).balance > 0;\\r\\n        upkeepNeeded = (isOpen && timePassed && hasPlayers && hasBalance);\\r\\n        // ( block.timestamp - last block timestamp ) > interval\\r\\n    }\\r\\n\\r\\n    //function requestRandomWinner() external {\\r\\n    function performUpkeep(bytes calldata /* performData */) external override {\\r\\n        (bool upkeepNeeded, ) = checkUpkeep(\\\"\\\");\\r\\n        if (!upkeepNeeded) {\\r\\n            revert Raffle__upKeepNotNeeded(\\r\\n                address(this).balance,\\r\\n                s_players.length,\\r\\n                uint256(s_raffleState)\\r\\n            );\\r\\n        }\\r\\n        s_raffleState = RaffleState.CALCULATING;\\r\\n        uint256 requestId = i_vrfCoordinator.requestRandomWords(\\r\\n            i_gasLane, // gasLane\\r\\n            i_subscriptionId,\\r\\n            REQUEST_CONFIRMATON,\\r\\n            i_callbackGasLimit,\\r\\n            NUM_WORDS\\r\\n        );\\r\\n        emit RequestedRaffleWinner(requestId);\\r\\n    }\\r\\n\\r\\n    function fulfillRandomWords(\\r\\n        uint256 /*requestId */,\\r\\n        uint256[] memory randomwords\\r\\n    ) internal override {\\r\\n        uint256 indexOfWinner = randomwords[0] % s_players.length;\\r\\n        address payable recentWinner = s_players[indexOfWinner];\\r\\n        s_recentWinner = recentWinner;\\r\\n        s_raffleState = RaffleState.OPEN;\\r\\n        s_players = new address payable[](0);\\r\\n        s_lastTimeStamp = block.timestamp;\\r\\n        (bool success, ) = recentWinner.call{value: address(this).balance}(\\\"\\\");\\r\\n        if (!success) {\\r\\n            revert Raffle__TransferFailed();\\r\\n        }\\r\\n        emit WinnerPicked(recentWinner);\\r\\n    }\\r\\n\\r\\n    /* View / pure functions */\\r\\n\\r\\n    function getEntranceFee() public view returns (uint256) {\\r\\n        return i_entranceFee;\\r\\n    }\\r\\n\\r\\n    function getPlayers(uint256 index) public view returns (address) {\\r\\n        return s_players[index];\\r\\n    }\\r\\n\\r\\n    function getRecentWinner() public view returns (address) {\\r\\n        return s_recentWinner;\\r\\n    }\\r\\n\\r\\n    function getRaffleState() public view returns (RaffleState) {\\r\\n        return s_raffleState;\\r\\n    }\\r\\n\\r\\n    function getNumWords() public pure returns (uint256) {\\r\\n        return NUM_WORDS;\\r\\n    }\\r\\n\\r\\n    function getNumberOfPlayers() public view returns (uint256) {\\r\\n        return s_players.length;\\r\\n    }\\r\\n\\r\\n    function getLatestTimeStamp() public view returns (uint256) {\\r\\n        return s_lastTimeStamp;\\r\\n    }\\r\\n\\r\\n    function getRequestConfirmations() public pure returns (uint256) {\\r\\n        return REQUEST_CONFIRMATON;\\r\\n    }\\r\\n\\r\\n    function getInterval() public view returns (uint256) {\\r\\n        return i_interval;\\r\\n    }\\r\\n}\\r\\n// localhost\\r\\n// Raffle deployed at: 0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9\\r\\n\\r\\n// Polygon Mumbai\\r\\n// \\\"Raffle\\\" at 0xe5eb74cF8Ea0fdcD3d8deFfEA2d1E8A744aF4a98\",\"keccak256\":\"0x0d8c66c7f13ee33016946002d7f7e9879d12529b2a0ba04b403a1dcc42fdd147\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101606040523480156200001257600080fd5b506040516200187338038062001873833981810160405281019062000038919062000294565b858073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050508460a081815250508573ffffffffffffffffffffffffffffffffffffffff1660c08173ffffffffffffffffffffffffffffffffffffffff16815250508360e081815250508267ffffffffffffffff166101008167ffffffffffffffff16815250508163ffffffff166101208163ffffffff16815250506000600160146101000a81548160ff021916908360018111156200010d576200010c62000330565b5b0217905550426002819055508061014081815250505050505050506200035f565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620001608262000133565b9050919050565b620001728162000153565b81146200017e57600080fd5b50565b600081519050620001928162000167565b92915050565b6000819050919050565b620001ad8162000198565b8114620001b957600080fd5b50565b600081519050620001cd81620001a2565b92915050565b6000819050919050565b620001e881620001d3565b8114620001f457600080fd5b50565b6000815190506200020881620001dd565b92915050565b600067ffffffffffffffff82169050919050565b6200022d816200020e565b81146200023957600080fd5b50565b6000815190506200024d8162000222565b92915050565b600063ffffffff82169050919050565b6200026e8162000253565b81146200027a57600080fd5b50565b6000815190506200028e8162000263565b92915050565b60008060008060008060c08789031215620002b457620002b36200012e565b5b6000620002c489828a0162000181565b9650506020620002d789828a01620001bc565b9550506040620002ea89828a01620001f7565b9450506060620002fd89828a016200023c565b93505060806200031089828a016200027d565b92505060a06200032389828a01620001bc565b9150509295509295509295565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60805160a05160c05160e05161010051610120516101405161149d620003d6600039600081816108740152610906015260006106eb015260006106c8015260006106a70152600061066b0152600081816103400152818161043d01526108e001526000818161037d01526103d1015261149d6000f3fe6080604052600436106100dd5760003560e01c8063473f1ddc1161007f5780636e04ff0d116100595780636e04ff0d1461027d5780637ea3e6c1146102bb57806391ad27b4146102e6578063fd6673f514610311576100dd565b8063473f1ddc146101fc57806353a2c19a146102275780635f1b0fd814610252576100dd565b80632cfcc539116100bb5780632cfcc53914610161578063320229eb1461016b5780634585e33b14610196578063460e2049146101bf576100dd565b806309bc33a7146100e2578063115cbaf51461010d5780631fe543e314610138575b600080fd5b3480156100ee57600080fd5b506100f761033c565b6040516101049190610c27565b60405180910390f35b34801561011957600080fd5b50610122610364565b60405161012f9190610cb9565b60405180910390f35b34801561014457600080fd5b5061015f600480360381019061015a9190610e6d565b61037b565b005b61016961043b565b005b34801561017757600080fd5b506101806105aa565b60405161018d9190610c27565b60405180910390f35b3480156101a257600080fd5b506101bd60048036038101906101b89190610f24565b6105b4565b005b3480156101cb57600080fd5b506101e660048036038101906101e19190610f71565b6107a4565b6040516101f39190610fdf565b60405180910390f35b34801561020857600080fd5b506102116107eb565b60405161021e9190610fdf565b60405180910390f35b34801561023357600080fd5b5061023c610815565b6040516102499190610c27565b60405180910390f35b34801561025e57600080fd5b50610267610824565b6040516102749190610c27565b60405180910390f35b34801561028957600080fd5b506102a4600480360381019061029f91906110af565b610831565b6040516102b2929190611192565b60405180910390f35b3480156102c757600080fd5b506102d06108de565b6040516102dd9190610c27565b60405180910390f35b3480156102f257600080fd5b506102fb610902565b6040516103089190610c27565b60405180910390f35b34801561031d57600080fd5b5061032661092a565b6040516103339190610c27565b60405180910390f35b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600160149054906101000a900460ff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461042d57337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f40000000000000000000000000000000000000000000000000000000081526004016104249291906111c2565b60405180910390fd5b6104378282610936565b5050565b7f0000000000000000000000000000000000000000000000000000000000000000341015610495576040517f066d781f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060018111156104a9576104a8610c42565b5b600160149054906101000a900460ff1660018111156104cb576104ca610c42565b5b14610502576040517f1425571c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f0805e1d667bddb8a95f0f09880cf94f403fb596ce79928d9f29b74203ba284d460405160405180910390a2565b6000600254905090565b60006105ce60405180602001604052806000815250610831565b5090508061063d5747600080549050600160149054906101000a900460ff1660018111156105ff576105fe610c42565b5b6040517f43df4e3d000000000000000000000000000000000000000000000000000000008152600401610634939291906111eb565b60405180910390fd5b60018060146101000a81548160ff0219169083600181111561066257610661610c42565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b815260040161072c95949392919061129a565b6020604051808303816000875af115801561074b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061076f9190611302565b9050807fcd6e45c8998311cab7e9d4385596cac867e20a0587194b954fa3a731c93ce78b60405160405180910390a250505050565b60008082815481106107b9576107b861132f565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600163ffffffff16905090565b6000600361ffff16905090565b600060606000600160149054906101000a900460ff16600181111561085957610858610c42565b5b6000600181111561086d5761086c610c42565b5b14905060007f0000000000000000000000000000000000000000000000000000000000000000600254426108a1919061138d565b119050600080600080549050119050600080471190508380156108c15750825b80156108ca5750815b80156108d35750805b955050505050915091565b7f000000000000000000000000000000000000000000000000000000000000000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60008080549050905090565b60008080549050826000815181106109515761095061132f565b5b602002602001015161096391906113f0565b9050600080828154811061097a5761097961132f565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160146101000a81548160ff02191690836001811115610a0e57610a0d610c42565b5b0217905550600067ffffffffffffffff811115610a2e57610a2d610d2a565b5b604051908082528060200260200182016040528015610a5c5781602001602082028036833780820191505090505b5060009080519060200190610a72929190610b67565b504260028190555060008173ffffffffffffffffffffffffffffffffffffffff1647604051610aa090611452565b60006040518083038185875af1925050503d8060008114610add576040519150601f19603f3d011682016040523d82523d6000602084013e610ae2565b606091505b5050905080610b1d576040517fa1d04b3900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff167f5b690ec4a06fe979403046eaeea5b3ce38524683c3001f662c8b5a829632f7df60405160405180910390a25050505050565b828054828255906000526020600020908101928215610be0579160200282015b82811115610bdf5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610b87565b5b509050610bed9190610bf1565b5090565b5b80821115610c0a576000816000905550600101610bf2565b5090565b6000819050919050565b610c2181610c0e565b82525050565b6000602082019050610c3c6000830184610c18565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60028110610c8257610c81610c42565b5b50565b6000819050610c9382610c71565b919050565b6000610ca382610c85565b9050919050565b610cb381610c98565b82525050565b6000602082019050610cce6000830184610caa565b92915050565b6000604051905090565b600080fd5b600080fd5b610cf181610c0e565b8114610cfc57600080fd5b50565b600081359050610d0e81610ce8565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610d6282610d19565b810181811067ffffffffffffffff82111715610d8157610d80610d2a565b5b80604052505050565b6000610d94610cd4565b9050610da08282610d59565b919050565b600067ffffffffffffffff821115610dc057610dbf610d2a565b5b602082029050602081019050919050565b600080fd5b6000610de9610de484610da5565b610d8a565b90508083825260208201905060208402830185811115610e0c57610e0b610dd1565b5b835b81811015610e355780610e218882610cff565b845260208401935050602081019050610e0e565b5050509392505050565b600082601f830112610e5457610e53610d14565b5b8135610e64848260208601610dd6565b91505092915050565b60008060408385031215610e8457610e83610cde565b5b6000610e9285828601610cff565b925050602083013567ffffffffffffffff811115610eb357610eb2610ce3565b5b610ebf85828601610e3f565b9150509250929050565b600080fd5b60008083601f840112610ee457610ee3610d14565b5b8235905067ffffffffffffffff811115610f0157610f00610ec9565b5b602083019150836001820283011115610f1d57610f1c610dd1565b5b9250929050565b60008060208385031215610f3b57610f3a610cde565b5b600083013567ffffffffffffffff811115610f5957610f58610ce3565b5b610f6585828601610ece565b92509250509250929050565b600060208284031215610f8757610f86610cde565b5b6000610f9584828501610cff565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610fc982610f9e565b9050919050565b610fd981610fbe565b82525050565b6000602082019050610ff46000830184610fd0565b92915050565b600080fd5b600067ffffffffffffffff82111561101a57611019610d2a565b5b61102382610d19565b9050602081019050919050565b82818337600083830152505050565b600061105261104d84610fff565b610d8a565b90508281526020810184848401111561106e5761106d610ffa565b5b611079848285611030565b509392505050565b600082601f83011261109657611095610d14565b5b81356110a684826020860161103f565b91505092915050565b6000602082840312156110c5576110c4610cde565b5b600082013567ffffffffffffffff8111156110e3576110e2610ce3565b5b6110ef84828501611081565b91505092915050565b60008115159050919050565b61110d816110f8565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561114d578082015181840152602081019050611132565b60008484015250505050565b600061116482611113565b61116e818561111e565b935061117e81856020860161112f565b61118781610d19565b840191505092915050565b60006040820190506111a76000830185611104565b81810360208301526111b98184611159565b90509392505050565b60006040820190506111d76000830185610fd0565b6111e46020830184610fd0565b9392505050565b60006060820190506112006000830186610c18565b61120d6020830185610c18565b61121a6040830184610c18565b949350505050565b6000819050919050565b61123581611222565b82525050565b600067ffffffffffffffff82169050919050565b6112588161123b565b82525050565b600061ffff82169050919050565b6112758161125e565b82525050565b600063ffffffff82169050919050565b6112948161127b565b82525050565b600060a0820190506112af600083018861122c565b6112bc602083018761124f565b6112c9604083018661126c565b6112d6606083018561128b565b6112e3608083018461128b565b9695505050505050565b6000815190506112fc81610ce8565b92915050565b60006020828403121561131857611317610cde565b5b6000611326848285016112ed565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061139882610c0e565b91506113a383610c0e565b92508282039050818111156113bb576113ba61135e565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006113fb82610c0e565b915061140683610c0e565b925082611416576114156113c1565b5b828206905092915050565b600081905092915050565b50565b600061143c600083611421565b91506114478261142c565b600082019050919050565b600061145d8261142f565b915081905091905056fea26469706673582212201d8919eaa1a48229a6ed629494a6f9d1e1d0413fe31f3b4f6ff46b60a5216d7d64736f6c63430008110033",
  "deployedBytecode": "0x6080604052600436106100dd5760003560e01c8063473f1ddc1161007f5780636e04ff0d116100595780636e04ff0d1461027d5780637ea3e6c1146102bb57806391ad27b4146102e6578063fd6673f514610311576100dd565b8063473f1ddc146101fc57806353a2c19a146102275780635f1b0fd814610252576100dd565b80632cfcc539116100bb5780632cfcc53914610161578063320229eb1461016b5780634585e33b14610196578063460e2049146101bf576100dd565b806309bc33a7146100e2578063115cbaf51461010d5780631fe543e314610138575b600080fd5b3480156100ee57600080fd5b506100f761033c565b6040516101049190610c27565b60405180910390f35b34801561011957600080fd5b50610122610364565b60405161012f9190610cb9565b60405180910390f35b34801561014457600080fd5b5061015f600480360381019061015a9190610e6d565b61037b565b005b61016961043b565b005b34801561017757600080fd5b506101806105aa565b60405161018d9190610c27565b60405180910390f35b3480156101a257600080fd5b506101bd60048036038101906101b89190610f24565b6105b4565b005b3480156101cb57600080fd5b506101e660048036038101906101e19190610f71565b6107a4565b6040516101f39190610fdf565b60405180910390f35b34801561020857600080fd5b506102116107eb565b60405161021e9190610fdf565b60405180910390f35b34801561023357600080fd5b5061023c610815565b6040516102499190610c27565b60405180910390f35b34801561025e57600080fd5b50610267610824565b6040516102749190610c27565b60405180910390f35b34801561028957600080fd5b506102a4600480360381019061029f91906110af565b610831565b6040516102b2929190611192565b60405180910390f35b3480156102c757600080fd5b506102d06108de565b6040516102dd9190610c27565b60405180910390f35b3480156102f257600080fd5b506102fb610902565b6040516103089190610c27565b60405180910390f35b34801561031d57600080fd5b5061032661092a565b6040516103339190610c27565b60405180910390f35b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600160149054906101000a900460ff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461042d57337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f40000000000000000000000000000000000000000000000000000000081526004016104249291906111c2565b60405180910390fd5b6104378282610936565b5050565b7f0000000000000000000000000000000000000000000000000000000000000000341015610495576040517f066d781f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060018111156104a9576104a8610c42565b5b600160149054906101000a900460ff1660018111156104cb576104ca610c42565b5b14610502576040517f1425571c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f0805e1d667bddb8a95f0f09880cf94f403fb596ce79928d9f29b74203ba284d460405160405180910390a2565b6000600254905090565b60006105ce60405180602001604052806000815250610831565b5090508061063d5747600080549050600160149054906101000a900460ff1660018111156105ff576105fe610c42565b5b6040517f43df4e3d000000000000000000000000000000000000000000000000000000008152600401610634939291906111eb565b60405180910390fd5b60018060146101000a81548160ff0219169083600181111561066257610661610c42565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b815260040161072c95949392919061129a565b6020604051808303816000875af115801561074b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061076f9190611302565b9050807fcd6e45c8998311cab7e9d4385596cac867e20a0587194b954fa3a731c93ce78b60405160405180910390a250505050565b60008082815481106107b9576107b861132f565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600163ffffffff16905090565b6000600361ffff16905090565b600060606000600160149054906101000a900460ff16600181111561085957610858610c42565b5b6000600181111561086d5761086c610c42565b5b14905060007f0000000000000000000000000000000000000000000000000000000000000000600254426108a1919061138d565b119050600080600080549050119050600080471190508380156108c15750825b80156108ca5750815b80156108d35750805b955050505050915091565b7f000000000000000000000000000000000000000000000000000000000000000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60008080549050905090565b60008080549050826000815181106109515761095061132f565b5b602002602001015161096391906113f0565b9050600080828154811061097a5761097961132f565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160146101000a81548160ff02191690836001811115610a0e57610a0d610c42565b5b0217905550600067ffffffffffffffff811115610a2e57610a2d610d2a565b5b604051908082528060200260200182016040528015610a5c5781602001602082028036833780820191505090505b5060009080519060200190610a72929190610b67565b504260028190555060008173ffffffffffffffffffffffffffffffffffffffff1647604051610aa090611452565b60006040518083038185875af1925050503d8060008114610add576040519150601f19603f3d011682016040523d82523d6000602084013e610ae2565b606091505b5050905080610b1d576040517fa1d04b3900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff167f5b690ec4a06fe979403046eaeea5b3ce38524683c3001f662c8b5a829632f7df60405160405180910390a25050505050565b828054828255906000526020600020908101928215610be0579160200282015b82811115610bdf5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610b87565b5b509050610bed9190610bf1565b5090565b5b80821115610c0a576000816000905550600101610bf2565b5090565b6000819050919050565b610c2181610c0e565b82525050565b6000602082019050610c3c6000830184610c18565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60028110610c8257610c81610c42565b5b50565b6000819050610c9382610c71565b919050565b6000610ca382610c85565b9050919050565b610cb381610c98565b82525050565b6000602082019050610cce6000830184610caa565b92915050565b6000604051905090565b600080fd5b600080fd5b610cf181610c0e565b8114610cfc57600080fd5b50565b600081359050610d0e81610ce8565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610d6282610d19565b810181811067ffffffffffffffff82111715610d8157610d80610d2a565b5b80604052505050565b6000610d94610cd4565b9050610da08282610d59565b919050565b600067ffffffffffffffff821115610dc057610dbf610d2a565b5b602082029050602081019050919050565b600080fd5b6000610de9610de484610da5565b610d8a565b90508083825260208201905060208402830185811115610e0c57610e0b610dd1565b5b835b81811015610e355780610e218882610cff565b845260208401935050602081019050610e0e565b5050509392505050565b600082601f830112610e5457610e53610d14565b5b8135610e64848260208601610dd6565b91505092915050565b60008060408385031215610e8457610e83610cde565b5b6000610e9285828601610cff565b925050602083013567ffffffffffffffff811115610eb357610eb2610ce3565b5b610ebf85828601610e3f565b9150509250929050565b600080fd5b60008083601f840112610ee457610ee3610d14565b5b8235905067ffffffffffffffff811115610f0157610f00610ec9565b5b602083019150836001820283011115610f1d57610f1c610dd1565b5b9250929050565b60008060208385031215610f3b57610f3a610cde565b5b600083013567ffffffffffffffff811115610f5957610f58610ce3565b5b610f6585828601610ece565b92509250509250929050565b600060208284031215610f8757610f86610cde565b5b6000610f9584828501610cff565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610fc982610f9e565b9050919050565b610fd981610fbe565b82525050565b6000602082019050610ff46000830184610fd0565b92915050565b600080fd5b600067ffffffffffffffff82111561101a57611019610d2a565b5b61102382610d19565b9050602081019050919050565b82818337600083830152505050565b600061105261104d84610fff565b610d8a565b90508281526020810184848401111561106e5761106d610ffa565b5b611079848285611030565b509392505050565b600082601f83011261109657611095610d14565b5b81356110a684826020860161103f565b91505092915050565b6000602082840312156110c5576110c4610cde565b5b600082013567ffffffffffffffff8111156110e3576110e2610ce3565b5b6110ef84828501611081565b91505092915050565b60008115159050919050565b61110d816110f8565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561114d578082015181840152602081019050611132565b60008484015250505050565b600061116482611113565b61116e818561111e565b935061117e81856020860161112f565b61118781610d19565b840191505092915050565b60006040820190506111a76000830185611104565b81810360208301526111b98184611159565b90509392505050565b60006040820190506111d76000830185610fd0565b6111e46020830184610fd0565b9392505050565b60006060820190506112006000830186610c18565b61120d6020830185610c18565b61121a6040830184610c18565b949350505050565b6000819050919050565b61123581611222565b82525050565b600067ffffffffffffffff82169050919050565b6112588161123b565b82525050565b600061ffff82169050919050565b6112758161125e565b82525050565b600063ffffffff82169050919050565b6112948161127b565b82525050565b600060a0820190506112af600083018861122c565b6112bc602083018761124f565b6112c9604083018661126c565b6112d6606083018561128b565b6112e3608083018461128b565b9695505050505050565b6000815190506112fc81610ce8565b92915050565b60006020828403121561131857611317610cde565b5b6000611326848285016112ed565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061139882610c0e565b91506113a383610c0e565b92508282039050818111156113bb576113ba61135e565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006113fb82610c0e565b915061140683610c0e565b925082611416576114156113c1565b5b828206905092915050565b600081905092915050565b50565b600061143c600083611421565b91506114478261142c565b600082019050919050565b600061145d8261142f565b915081905091905056fea26469706673582212201d8919eaa1a48229a6ed629494a6f9d1e1d0413fe31f3b4f6ff46b60a5216d7d64736f6c63430008110033",
  "devdoc": {
    "author": "Shaiza Tahir",
    "details": "This implements ChainlinkVRF v2 and Chainlink Keepers",
    "kind": "dev",
    "methods": {
      "checkUpkeep(bytes)": {
        "details": "This is the function that chainlink keeper nodes call they look for the 'upKeepNeeded' to return true The following should be true in order to return true: 1 Our time interval should have passed. 2 The lottery should have atleast 1 player, and some ETH 3 Our subscription is funded with link 4 The lottery should be in an \"open state\""
      }
    },
    "title": "A sample Raffle contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "This contract is for creating an untamperable decentralized smart contract",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 197,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_players",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address_payable)dyn_storage"
      },
      {
        "astId": 214,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_recentWinner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 217,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_raffleState",
        "offset": 20,
        "slot": "1",
        "type": "t_enum(RaffleState)192"
      },
      {
        "astId": 219,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_lastTimeStamp",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_address_payable)dyn_storage": {
        "base": "t_address_payable",
        "encoding": "dynamic_array",
        "label": "address payable[]",
        "numberOfBytes": "32"
      },
      "t_enum(RaffleState)192": {
        "encoding": "inplace",
        "label": "enum Raffle.RaffleState",
        "numberOfBytes": "1"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}